#==============================================================================
# ■ 負責處理彈跳菇的動作


# 註：計算總動作時間時記得是每個wait
#==============================================================================
class Bounce_Mushroom < Game_Motion
#--------------------------------------------------------------------------
# ○ 人物生成/初始化
#--------------------------------------------------------------------------
def initialize(me,frame=0,anime="stand")
  super


  # 宣告所有動畫
  @anime = {"stand" => [], "walk" => [], "dizzy1" => [], "dizzy2" => [], "bounce" => []}
  
  
  # 設定動作的影格
  frame_set
  
  @target = nil
  @full_limit = 11
  
  
end

#==============================================================================
# ■影格設置
#==============================================================================

def frame_set
#-------------------------------------------------------------------------------
# ○ 站立
#-------------------------------------------------------------------------------
@anime["stand"][0] = {"pic" => 1, "wait" => 3, "next" => 1, "body" => @me.stand_body_rect, "atk" => [Rect.new(-168 , -120, 336, 60)], "z_pos" =>  -100, "penetrate" => true}
@anime["stand"][1] = {"pic" => 2, "wait" => 3, "next" => 2}
@anime["stand"][2] = {"pic" => 3, "wait" => 3, "next" => 3}
@anime["stand"][3] = {"pic" => 4, "wait" => 3, "next" => 4}
@anime["stand"][4] = {"pic" => 5, "wait" => 3, "next" => 5}
@anime["stand"][5] = {"pic" => 6, "wait" => 3, "next" => 6}
@anime["stand"][6] = {"pic" => 7, "wait" => 3, "next" => 0}
#-------------------------------------------------------------------------------
# ○ 走路
#-------------------------------------------------------------------------------
@anime["walk"][0] = {"pic" => 1, "wait" => 5, "next" => 1, "z_pos" =>  1}
@anime["walk"][1] = {"pic" => 2, "wait" => 5, "next" => 0}

#-------------------------------------------------------------------------------
# ○ 被捉的動作
#-------------------------------------------------------------------------------
# 肚子痛
@anime["dizzy1"][0] = {"pic" => 91, "wait" => 3, "next" => 1}
@anime["dizzy1"][1] = {"pic" => 92, "wait" => 3, "next" => 0}
@anime["dizzy2"][0] = {"pic" => 101, "wait" => 3, "next" => 1}
@anime["dizzy2"][1] = {"pic" => 102, "wait" => 3, "next" => 0}

#-------------------------------------------------------------------------------
# ○ 彈跳
#-------------------------------------------------------------------------------
@anime["bounce"][0] = {"pic" => 11, "wait" => 3, "next" => 1, "se"=> ["bounce", 67, 100]}
@anime["bounce"][1] = {"pic" => 12, "wait" => 3, "next" => 2}
@anime["bounce"][2] = {"pic" => 13, "wait" => 3, "next" => 3}
@anime["bounce"][3] = {"pic" => 14, "wait" => 3, "next" => 4}
@anime["bounce"][4] = {"pic" => 15, "wait" => 3, "next" => 5}
@anime["bounce"][5] = {"pic" => 16, "wait" => 3, "next" => 6}
@anime["bounce"][6] = {"pic" => 17, "wait" => 3, "next" => ["stand"]}

end




#==============================================================================
# ■ 主模組補強
#==============================================================================
  #--------------------------------------------------------------------------
  # ◇ 著地
  #--------------------------------------------------------------------------
  def do_landing_step
  end
  #--------------------------------------------------------------------------
  # ◇ 攻擊中
  #--------------------------------------------------------------------------
  def attacking?
    return 
  end  
  #--------------------------------------------------------------------------
  # ◇ 輕攻擊
  #--------------------------------------------------------------------------
  def z_skill?
    return 
  end  
  #--------------------------------------------------------------------------
  # ◇ 必殺
  #--------------------------------------------------------------------------
  def x_skill?
    return false
  end  

#==============================================================================
# ■ 指令設置
#==============================================================================

  #-------------------------------------------------------------------------------
  # ○ 無按鍵
  #-------------------------------------------------------------------------------
  def no_press_action
  end
  #-------------------------------------------------------------------------------
  # ○ 按住→
  #      hold_time：按住時間
  #-------------------------------------------------------------------------------
  def hold_right
  end
  #-------------------------------------------------------------------------------
  # ○ 按住 ←
  #      hold_time：按住時間
  #-------------------------------------------------------------------------------
  def hold_left
  end
  #-------------------------------------------------------------------------------
  # ○ 按住↑
  #      dir：左右方向
  #-------------------------------------------------------------------------------
  def hold_up(dir)
  end
  #-------------------------------------------------------------------------------
  # ○ 按住↓
  #-------------------------------------------------------------------------------
  def hold_down
  end
  #-------------------------------------------------------------------------------
  # ○ 按住Z
  #-------------------------------------------------------------------------------
  def hold_z
  end
  #-------------------------------------------------------------------------------
  # ○ 按住X
  #-------------------------------------------------------------------------------
  def hold_x
  end
  #-------------------------------------------------------------------------------
  # ○ 按住S
  #-------------------------------------------------------------------------------
  def hold_s
  end 
  #-------------------------------------------------------------------------------
  # ○ 按住C
  #-------------------------------------------------------------------------------
  def hold_c
  end
  #-------------------------------------------------------------------------------
  # ○ 上
  #-------------------------------------------------------------------------------
  def up_action(dir)
  end
  #-------------------------------------------------------------------------------
  # ○ 下
  #-------------------------------------------------------------------------------
  def down_action
  end
  #-------------------------------------------------------------------------------
  # ○ 前
  #-------------------------------------------------------------------------------
  def front_action
  end
  #-------------------------------------------------------------------------------
  # ○ 後
  #-------------------------------------------------------------------------------
  def back_action
  end
  #--------------------------------------------------------------------------
  # ◇ →→
  #--------------------------------------------------------------------------
  def do_66
  end
  #--------------------------------------------------------------------------
  # ◇ ←←
  #--------------------------------------------------------------------------
  def do_44
  end

  #--------------------------------------------------------------------------
  # ◇ ↑↑
  #--------------------------------------------------------------------------
  def do_88 
  end
  #--------------------------------------------------------------------------
  # ◇ ↓↓
  #--------------------------------------------------------------------------
  def do_22 
  end
  
  
  #-------------------------------------------------------------------------------
  # ○ Z
  #-------------------------------------------------------------------------------
  def z_action
  end
  #-------------------------------------------------------------------------------
  # ○ →Z
  #-------------------------------------------------------------------------------
  def fz_action
  end
  #-------------------------------------------------------------------------------
  # ○ ↓Z
  #-------------------------------------------------------------------------------
  def dz_action
    z_action
  end
  #-------------------------------------------------------------------------------
  # ○ ↑Z
  #-------------------------------------------------------------------------------
  def uz_action
  end
  #-------------------------------------------------------------------------------
  # ○ ←Z
  #-------------------------------------------------------------------------------
  def bz_action
  end
  #-------------------------------------------------------------------------------
  # ○ X
  #-------------------------------------------------------------------------------
  def x_action
  end
  #-------------------------------------------------------------------------------
  # ○ →X
  #-------------------------------------------------------------------------------
  def fx_action
  end
  #-------------------------------------------------------------------------------
  # ○ ↓X
  #-------------------------------------------------------------------------------
  def dx_action
  end
  #-------------------------------------------------------------------------------
  # ○ ↑X
  #-------------------------------------------------------------------------------
  def ux_action
  end
  #-------------------------------------------------------------------------------
  # ○ ←X
  #-------------------------------------------------------------------------------
  def bx_action
  end
  #-------------------------------------------------------------------------------
  # ○ C
  #-------------------------------------------------------------------------------
  def c_action
  end
  #-------------------------------------------------------------------------------
  # ○ →C
  #-------------------------------------------------------------------------------
  def fc_action
  end
  #-------------------------------------------------------------------------------
  # ○ ↑C
  #-------------------------------------------------------------------------------
  def uc_action
  end
  #-------------------------------------------------------------------------------
  # ○ ↓C
  #-------------------------------------------------------------------------------
  def dc_action
  end
  #-------------------------------------------------------------------------------
  # ○ ←C
  #-------------------------------------------------------------------------------
  def bc_action
  end
  
  #-------------------------------------------------------------------------------
  # ○ 常時監視A (不受暫停、受傷定格效果影響)
  #      通常用在調整受傷、倒地這種不確定何時恢復姿勢的情況
  #-------------------------------------------------------------------------------
  def respective_updateA
  end
  #-------------------------------------------------------------------------------
  # ○ 常時監視B (受暫停、受傷定格效果影響)
  #-------------------------------------------------------------------------------
  def respective_updateB
    if @target != nil && ["jump", "f_jump"].include?(@target.motion.state) && @target.motion.anime_time == 6 and @state == "bounce"
       @target.now_y_speed += 18
       @target = nil
    end
  end
  
  
#==============================================================================
# ■ 其他
#==============================================================================
  
  #--------------------------------------------------------------------------
  # ◇ 碰撞判定時的變數設置
  #--------------------------------------------------------------------------  
  def collision_varset(action, target)
  end
  #--------------------------------------------------------------------------
  # ◇ 碰撞行為
  # action：自身的行動
  # target：目標
  # 構想：處刑演出(目標血量or自己血量小於定值)
  #--------------------------------------------------------------------------  
  def collision_action(action, target)
  end
  
  #--------------------------------------------------------------------------
  # ◇ 判定相交的處理
  #--------------------------------------------------------------------------  
  def collision_process(action, target)
    if ["jump_fall", "double_jump_fall", "f_jump_fall", "b_jump_fall", "hf_jump_fall", "hb_jump_fall", "h_jump_fall"].include?(target.motion.state)
       # 記憶目標
      @target = target
   #   @penetrate = true
      dir = 0
      dir = 1 if Kboard.press?($game_config.battle_key["RIGHT"])
      dir = -1 if Kboard.press?($game_config.battle_key["LEFT"])
      if dir == 0
        target.motion.change_anime("jump")
      else
        target.direction = dir
        ["dash", "f_chase"].include?(target.motion.state) ? target.motion.change_anime("hf_jump") : target.motion.change_anime("f_jump")
      end
      change_anime("bounce")
    else
    #  @penetrate = false
      @attack_hit_targets.clear
    end
  end
  
  #--------------------------------------------------------------------------
  # ◇ 取得攻擊目標範圍
  #     (1：敵方、2：我方、3：使用者)
  #--------------------------------------------------------------------------  
  def get_skill_scope
    return 1
  end
  
    
  #--------------------------------------------------------------------------
  # ◇ 攻擊效果設定
  #--------------------------------------------------------------------------  
  def skill_effect(skill, target)
      result = super(skill, target)
      if skill == "stand" or skill == "bounce"
        result["no_atk"] = true
      else
      end #if end
      return result
  end #def end
end # class end
